<?xml version="1.0" encoding="utf-8"?>
<programList xmlns="ProgramNameSpace">
  <program name="Axis4" public="false">
    <description />
    <paramSection />
    <localSection>
      <local name="l_jTemp" type="joint" size="1" />
      <local name="l_sTmp" type="string" size="6" />
      <local name="l_nEtat" type="num" size="1" />
      <local name="l_sButton" type="string" size="2" />
      <local name="l_jWanted" type="joint" size="1" />
      <local name="l_bResult" type="bool" size="1" />
    </localSection>
    <source>
      <code>begin
  if bStop
    return
  endIf
  cls()
  title(" Origin Adjustment : Axis 4 ")
  disablePower()
  bEnablePrevious=false
  nCurrentLine=1
  nActualStep=400
  nPreviousStep=0  
  jWanted={nNoFixed,nNoFixed,nNoFixed,nNoFixed,nNoFixed,nNoFixed}
  do
    if nPreviousStep!=nActualStep
      nPreviousStep=nActualStep
      title(" Origin Adjustment : Axis 4 ["+toString("1",nActualStep-400)+"/"+toString("1",413-400)+"]")
      switch nActualStep
        case 400          
          bDisplayPos=false
          sUserMessage="WARNING : joint 5 must be already adjusted to adjust joint 4 correctly"+chr(13)+"  Enter to continue"+chr(13)+"  F2 to escape"
          call WaitKey(270,l_bResult)
          if l_bResult
            nActualStep=nActualStep+1
          endIf
        break
        case 401   
          bDisplayPos=false 
          call UP:clear(0,5)               
          //on degage la pointe
          sUserMessage="* Move away the counter pointer"+chr(13)+"  Then press enter"
          call WaitKey(270,l_bResult)
          if l_bResult
            nActualStep=nActualStep+1
          endIf
        break
        case 402
          bDisplayPos=false
          //Mise sous puissance
          bEnablePrevious=false
          call CheckIsPowered(l_bResult)
          if l_bResult
            nActualStep=nActualStep+1
          endIf
        break  
        case 403
          bDisplayPos=true
          //Mouvement pret du point demandé
          bEnablePrevious=false
          jWanted={nConstant,nConstant,nNoFixed,0,-90,0}
          sUserMessage="* Move the arm close to the destination point"+chr(13)+"  Then press enter"
          call WaitKey(270,l_bResult)
          if l_bResult
            l_jTemp=herej()
            jWanted.j1=l_jTemp.j1
            jWanted.j2=l_jTemp.j2
            jWanted.j3=l_jTemp.j3
            nActualStep=nActualStep+1      
          endIf
        break
        case 404
          bDisplayPos=true
          //on verif la position
          bEnablePrevious=true
          call CheckPosition(jWanted,bOr(bOr(nJoint[0],nJoint[1]),nJoint[2]),l_bResult)
          if l_bResult
            //et on la sauvegarde
            jAdj4_1=herej()
            disablePower()
            nActualStep=nActualStep+1
          else
            nActualStep=nActualStep-1
          endIf                  
        break
        case 405
          bDisplayPos=false
          //Mise en place de la contre pointe
          bEnablePrevious=true
          sUserMessage="* Place counter pointer against Z pointer"+chr(13)+"  then press enter"
          call WaitKey(270,l_bResult)
          if l_bResult
            nActualStep=nActualStep+1
          else
            nActualStep=nActualStep-2
          endIf
        break
        case 406
          bDisplayPos=false
          bEnablePrevious=true
          //Mise sous puissance
          call CheckIsPowered(l_bResult)
          if l_bResult
            nActualStep=nActualStep+1
          else
            nActualStep=nActualStep-1
          endIf
        break
        case 407
          bDisplayPos=true
          //Mouvement pret du point demandé
          bEnablePrevious=true
          jWanted={jAdj4_1.j1,jAdj4_1.j2,nNoFixed,0,-90,0}
          sUserMessage="* Move away the arm using joint 1&amp;3 movement"+chr(13)+"  then press enter"
          call WaitKey(270,l_bResult)
          if l_bResult
            nActualStep=nActualStep+1
          else
            nActualStep=nActualStep-2 
          endIf
        break  
        case 408     
          bDisplayPos=true
          bEnablePrevious=true
          jWanted={jAdj4_1.j1,jAdj4_1.j2,nNoFixed,0,90,0}
          sUserMessage="* Move the arm close to the destination point"+chr(13)+"  then press enter"
          call WaitKey(270,l_bResult)
          if l_bResult
            nActualStep=nActualStep+1
          else
            nActualStep=nActualStep-1 
          endIf 
        break
        case 409
          bDisplayPos=true
          //on verif la position
          bEnablePrevious=true
          call CheckPosition(jWanted,4,l_bResult)
          if l_bResult
            //on sauvegarde la position
            jAdj4_2=herej()
            nActualStep=nActualStep+1
          else
            nActualStep=nActualStep-1
          endIf
        break
        case 410
          bDisplayPos=true
          //on verif la position
          bEnablePrevious=true
          jWanted={jAdj4_1.j1,jAdj4_1.j2,nNoFixed,nNoFixed,90,0}
          sUserMessage="* Align Z and counter pointer using joint 3&amp;4 movement only"+chr(13)+" Then press enter"
          call WaitKey(270,l_bResult)
          if l_bResult
            //on sauvegarde la position
            nActualStep=nActualStep+1
          else
            nActualStep=nActualStep-2
          endIf
        break
        case 411
          bDisplayPos=true
          //on verif la position
          bEnablePrevious=true
          call CheckPosition(jWanted,bOr(bOr(bOr(nJoint[0],nJoint[1]),nJoint[4]),nJoint[5]),l_bResult)
          if l_bResult
            //on sauvegarde la position
            jAdj4_3=herej()
            disablePower()
            nActualStep=nActualStep+1
          else
            nActualStep=nActualStep-1
          endIf
        break
        case 412
          bDisplayPos=false
          disablePower()
          //calcul de l'erreur
          jActual=herej()
          nOffset4=(jActual.j4)/2
          sUserMessage="Offset : "+toString("1.3",nOffset4)
          nActualStep=nActualStep+1
        break
        case 413
          bDisplayPos=false
          //on applique l'offset calculé sur l'axe donné
          call ApplyOffset(l_bResult)
          if l_bResult
            l_jTemp=jAdj4_3
            l_jTemp.j4=nOffset4            
            $setOffset(l_jTemp)
            cls()
            bRefreshScreen=true
            sUserMessage="Joint 4 adjusted"+chr(13)+"Press enter"
            bAdjDone[2]=true
            call WaitKey(270,l_bResult) 
            if l_bResult
              nActualStep=nActualStep+1
            else
              nActualStep=nActualStep-2
            endIf 
          else
            nActualStep=nActualStep+1
          endIf
        break
      endSwitch
      //on stoppe l'affichage de la position
      delay(0.1)
    endIf
  until (nActualStep&gt;413) or bStop
end

      
        
        </code>
    </source>
  </program>
</programList>