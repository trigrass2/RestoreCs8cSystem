<?xml version="1.0" encoding="utf-8"?>
<programList xmlns="ProgramNameSpace">
  <program name="Axis6" public="false">
    <description />
    <paramSection />
    <localSection>
      <local name="l_sTmp" type="string" size="6" />
      <local name="l_noffset" type="num" size="1" />
      <local name="l_jTemp" type="joint" size="1" />
      <local name="l_bResult" type="bool" size="1" />
    </localSection>
    <source>
      <code>begin
  if bStop or bArmIsHSM
    return
  endIf
  cls()
  title(" Origin Adjustment : Axis 6 ")
  disablePower()
  bEnablePrevious=false
  nCurrentLine=1
  nActualStep=600
  nPreviousStep=0
  jWanted={nNoFixed,nNoFixed,nNoFixed,nNoFixed,nNoFixed,nNoFixed}
  do
    if nPreviousStep!=nActualStep
      nPreviousStep=nActualStep
      title(" Origin Adjustment : Axis 6 ["+toString("1",nActualStep-600)+"/"+toString("1",612-600)+"]")
      switch nActualStep
        case 600      
          bDisplayPos=false    
          sUserMessage="WARNING : joints 2, 3, 4 and 5 must be already adjusted to adjust joint 6 correctly"+chr(13)+"  Enter to continue"+chr(13)+"  F2 to escape"
          call WaitKey(270,l_bResult)
          if l_bResult
            nActualStep=nActualStep+1
          endIf
        break
        case 601      
          bDisplayPos=false
          call UP:clear(0,5)    
          //Degagement de la contre pointe
          sUserMessage="* Move away the counter pointer"+chr(13)+"  Then press enter"
          call WaitKey(270,l_bResult)
          if l_bResult
            nActualStep=nActualStep+1
          endIf
        break
        case 602
          bDisplayPos=false
          //Mise sous puissance
          bEnablePrevious=false
          call CheckIsPowered(l_bResult)
          if l_bResult
            nActualStep=nActualStep+1
          endIf
        break
        case 603
          bDisplayPos=true
          //Mouvement pret du point demandé
          bEnablePrevious=false
          jWanted={nConstant,nNoFixed,nNoFixed,0,nNoFixed,90}
          sUserMessage="* Move the arm close to the destination point"+chr(13)+"  Then press enter"
          call WaitKey(270,l_bResult)
          if l_bResult
            l_jTemp=herej()
            jWanted.j1=l_jTemp.j1
            nActualStep=nActualStep+1
          endIf
        break
        case 604
          bDisplayPos=true
          //on verif la position
          bEnablePrevious=true
          call CheckPosition(jWanted,bOr(bOr(bOr(nJoint[0],nJoint[1]),nJoint[2]),nJoint[4]),l_bResult)
          if l_bResult
            //et on la sauvegarde
            jAdj6_1=herej()
            disablePower()
            nActualStep=nActualStep+1
          else
            nActualStep=nActualStep-1
          endIf          
        break
        case 605    
          bDisplayPos=false           
          //Mise en place de la contre pointe
          bEnablePrevious=true
          sUserMessage="* Place counter pointer against Y pointer"+chr(13)+"  Then press enter"
          call WaitKey(270,l_bResult)
          if l_bResult
            nActualStep=nActualStep+1
          else
            nActualStep=nActualStep-2
          endIf
        break
        case 606
          bDisplayPos=false           
          bEnablePrevious=true
          //Mise sous puissance
          call CheckIsPowered(l_bResult)
          if l_bResult
            nActualStep=nActualStep+1
          else
            nActualStep=nActualStep-1
          endIf
        break
        case 607
          bDisplayPos=true
          //MOuvement pret du point demandé
          bEnablePrevious=true
          jWanted={jAdj6_1.j1,nNoFixed,nNoFixed,0,nNoFixed,-90}
          sUserMessage="* Move the arm close to the destination point"+chr(13)+"  Then press enter"
          call WaitKey(270,l_bResult)
          if l_bResult
            nActualStep=nActualStep+1
          else
            nActualStep=nActualStep-2 
          endIf
        break
        case 608   
          bDisplayPos=true   
          //on verif la position
          bEnablePrevious=true
          call CheckPosition(jWanted,bOr(bOr(nJoint[1],nJoint[2]),nJoint[4]),l_bResult)
          if l_bResult
            //on sauvegarde la position
            jAdj6_2=herej()
            nActualStep=nActualStep+1
          else
            nActualStep=nActualStep-1
          endIf
        break
        case 609
          bDisplayPos=true
          //L'utilisateur corrige manuellement l'erreur
          bEnablePrevious=true
          jWanted={jAdj6_1.j1,nNoFixed,nNoFixed,0,nNoFixed,nNoFixed}
          sUserMessage="* Align Y and counter pointer using joint 2, 3, 5 &amp; 6 movement"+chr(13)+"  Then press enter"
          call WaitKey(270,l_bResult)
          if l_bResult
            nActualStep=nActualStep+1
          else
            nActualStep=nActualStep-2
          endIf
        break
        case 610    
          bDisplayPos=true 
          //on verif la position
          bEnablePrevious=true          
          call CheckPosition(jWanted,bOr(bOr(bOr(nJoint[1],nJoint[2]),nJoint[4]),nJoint[5]),l_bResult)
          if l_bResult
            //on sauvegarde la position
            jAdj6_2=herej()
            nActualStep=nActualStep+1
          else
            nActualStep=nActualStep-1
          endIf
        break
        case 611
          bDisplayPos=false           
          disablePower()     
          //calcul de l'erreur
          nOffset6=(jAdj6_2.j6+90)/2
          sUserMessage="Offset : "+toString("1.3",nOffset6)
          nActualStep=nActualStep+1
        break
        case 612
          bDisplayPos=false           
          //on demande à l'utilisat
          call ApplyOffset(l_bResult)
          if l_bResult
            //on applique l'offset calculé sur l'axe donné
            l_jTemp=jAdj6_2
            l_jTemp.j6=-90+nOffset6
            $setOffset(l_jTemp)
            cls()
            bRefreshScreen=true
            sUserMessage="Joint 6 adjusted"+chr(13)+"Press enter"
            bAdjDone[4]=true
            nActualStep=nActualStep+1
            call WaitKey(270,l_bResult) 
            if l_bResult
              nActualStep=nActualStep+1
            else
              nActualStep=nActualStep-2
            endIf 
          else
            nActualStep=nActualStep+1
          endIf
        break        
      endSwitch
      //on stoppe l'affichage de la position
      delay(0.5)
    endIf
  until (nActualStep&gt;612) or bStop
end
        
</code>
    </source>
  </program>
</programList>